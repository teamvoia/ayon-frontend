import React, { useState, useEffect, useRef, useCallback } from 'react'
import styled from 'styled-components'
import {useCellEditing} from "@shared/containers";

// Helper: generate system name
const generateSystemName = (displayName: string): string => {
    return displayName
        .toLowerCase()
        .trim()
        .replace(/\s+/g, '_')
        .replace(/[^a-z0-9_]/g, '')
        .replace(/_+/g, '_')
        .replace(/^_|_$/g, '')
}

const EditingContainer = styled.div`
  position: absolute;
  width: 320px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  background: var(--md-sys-color-surface);
  border: 2px solid var(--md-sys-color-primary);
  border-radius: var(--border-radius-m);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  padding: 12px;
  z-index: 1000;
`

const InputGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`

const InputLabel = styled.label`
  font-size: 12px;
  font-weight: 500;
  color: var(--md-sys-color-on-surface);
`

const StyledInput = styled.input`
  width: 100%;
  padding: 6px 8px;
  border: 1px solid var(--md-sys-color-outline);
  border-radius: 4px;
  font-size: 14px;
  background-color: var(--md-sys-color-surface);
  color: var(--md-sys-color-on-surface);
  outline: none;

  &:focus {
    border-color: var(--md-sys-color-primary);
  }

  &.error {
    border-color: var(--md-sys-color-error);
  }

  &.system-name {
    font-family: monospace;
  }
`

const ErrorText = styled.div`
  font-size: 11px;
  color: var(--md-sys-color-error);
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  margin-top: 4px;
`

const Button = styled.button`
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 12px;
  cursor: pointer;
  border: none;
  
  &.cancel {
    background: transparent;
    color: var(--md-sys-color-on-surface);
    border: 1px solid var(--md-sys-color-outline);
  }
  
  &.save {
    background: var(--md-sys-color-primary);
    color: var(--md-sys-color-on-primary);
    
    &:disabled {
      background: var(--md-sys-color-surface-variant);
      color: var(--md-sys-color-on-surface-variant);
      cursor: not-allowed;
      opacity: 0.6;
    }
  }
`

const HelpText = styled.div`
  font-size: 11px;
  color: var(--md-sys-color-on-surface-variant);
  text-align: center;
  margin-top: 4px;
`

const AutoGeneratedIndicator = styled.span`
  color: var(--md-sys-color-on-surface-variant);
  font-size: 11px;
  font-weight: normal;
`

interface InlineEditingWidgetProps {
    cellId: string
    rowId: string
    entityType: string
    initialName: string
    initialLabel?: string
    onCancel?: () => void
}

const EdiditngEntityWidget: React.FC<InlineEditingWidgetProps> = ({
                                                                     cellId,
                                                                     rowId,
                                                                     entityType,
                                                                     initialName,
                                                                     initialLabel = '',
                                                                     onCancel
                                                                 }) => {
    const [label, setLabel] = useState(initialLabel)
    const [name, setName] = useState(initialName)
    const [isNameManuallyEdited, setIsNameManuallyEdited] = useState(false)
    const { setEditingCellId, updateEntities } = useCellEditing()
    const widgetRef = useRef<HTMLDivElement>(null)
    const labelInputRef = useRef<HTMLInputElement>(null)

    // Auto-generate name from label (display name)
    useEffect(() => {
        if (!isNameManuallyEdited && label) {
            setName(generateSystemName(label))
        }
    }, [label, isNameManuallyEdited])

    // Reset when props change
    useEffect(() => {
        setLabel(initialLabel)
        setName(initialName)
        setIsNameManuallyEdited(false)
    }, [initialLabel, initialName])

    useEffect(() => {
        // Focus and select the first input when component mounts
        if (labelInputRef.current) {
            const timer = setTimeout(() => {
                labelInputRef.current?.focus()
                labelInputRef.current?.select()
            }, 0)
            return () => clearTimeout(timer)
        }
    }, [])

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (widgetRef.current && !widgetRef.current.contains(event.target as Node)) {
                handleSave()
            }
        }

        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                handleCancel()
            } else if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {
                handleSave()
            }
        }

        // Delay attaching by one tick to prevent immediate trigger
        const timer = setTimeout(() => {
            document.addEventListener('mousedown', handleClickOutside)
            document.addEventListener('keydown', handleKeyDown)
        }, 0)

        return () => {
            clearTimeout(timer)
            document.removeEventListener('mousedown', handleClickOutside)
            document.removeEventListener('keydown', handleKeyDown)
        }
    }, [label, name])

    const handleSave = async () => {
        if (!label.trim()) return // Don't save if label is empty

        const hasChanges = name !== initialName || label !== initialLabel

        if (hasChanges) {
            // Update name if changed
            if (name !== initialName) {
                await updateEntities([
                    {
                        field: 'name',
                        value: name.trim() || generateSystemName(label.trim()),
                        type: entityType,
                        rowId,
                        id: rowId
                    }
                ])
            }

            // Update label if changed
            if (label !== initialLabel) {
                await updateEntities([
                    {
                        field: 'label',
                        value: label.trim(),
                        type: entityType,
                        rowId,
                        id: rowId
                    }
                ])
            }
        }

        setEditingCellId(null)
    }

    const handleCancel = () => {
        onCancel?.()
        setEditingCellId(null)
    }

    const handleLabelChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value
        setLabel(value)
        if (!isNameManuallyEdited) {
            setName(generateSystemName(value))
        }
    }, [isNameManuallyEdited])

    const handleNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        setName(e.target.value)
        setIsNameManuallyEdited(true)
    }, [])

    const canSave = label.trim() !== ''

    return (
        <EditingContainer ref={widgetRef} onClick={(e) => e.stopPropagation()}>
            <InputGroup>
                <InputLabel htmlFor={`${cellId}-label`}>
                    Label *
                </InputLabel>
                <StyledInput
                    ref={labelInputRef}
                    id={`${cellId}-label`}
                    type="text"
                    value={label}
                    onChange={handleLabelChange}
                    className={!label.trim() ? 'error' : ''}
                    placeholder="Enter display name"
                />
                {!label.trim() && (
                    <ErrorText>Label is required</ErrorText>
                )}
            </InputGroup>

            <InputGroup>
                <InputLabel htmlFor={`${cellId}-name`}>
                    Name {!isNameManuallyEdited && <AutoGeneratedIndicator>(auto-generated)</AutoGeneratedIndicator>}
                </InputLabel>
                <StyledInput
                    id={`${cellId}-name`}
                    type="text"
                    value={name}
                    onChange={handleNameChange}
                    className="system-name"
                    placeholder="system_name_with_underscores"
                />
            </InputGroup>

            <ButtonGroup>
                <Button type="button" onClick={handleCancel} className="cancel">
                    Cancel
                </Button>
                <Button
                    type="button"
                    onClick={handleSave}
                    disabled={!canSave}
                    className="save"
                >
                    Save
                </Button>
            </ButtonGroup>

            <HelpText>
                Press Ctrl+Enter to save, Esc to cancel
            </HelpText>
        </EditingContainer>
    )
}

export default EdiditngEntityWidget
