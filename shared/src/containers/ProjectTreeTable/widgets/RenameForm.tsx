import React, { useState, useEffect, useRef, useCallback } from 'react'
import styled from 'styled-components'
import { useCellEditing } from '@shared/containers'
import { useSelectionCellsContext } from '../context/SelectionCellsContext'
import { theme } from '@ynput/ayon-react-components'
import { upperFirst } from 'lodash'

// Helper: generate system name
const generateSystemName = (displayName: string): string => {
  return displayName
    .toLowerCase()
    .trim()
    .replace(/\s+/g, '_')
    .replace(/[^a-z0-9_]/g, '')
    .replace(/_+/g, '_')
    .replace(/^_|_$/g, '')
}

const EditingContainer = styled.div`
  background: var(--md-sys-color-surface-container-lowest);
  border: 2px solid var(--md-sys-color-primary);
  padding: 8px;
  width: 350px;
  border-radius: 4px;
`

const InputLabel = styled.label`
  font-size: 12px;
  color: var(--md-sys-color-outline);
`

const StyledInput = styled.input`
  width: 100%;
  border: none;
  background-color: var(--md-sys-color-surface-container-lowest);
  color: var(--md-sys-color-on-surface);

  &:focus {
    outline: none;
  }

  &.system-name {
    ${theme.bodySmall}
  }
`

interface InlineEditingWidgetProps {
  cellId: string
  rowId: string
  entityType: string
  initialName?: string
  initialLabel?: string
  onClose?: () => void
}

const RenameForm: React.FC<InlineEditingWidgetProps> = ({
  cellId,
  rowId,
  entityType,
  initialName,
  initialLabel = '',
  onClose,
}) => {
  const [label, setLabel] = useState(initialLabel)
  const [name, setName] = useState(initialName)
  const [isSaving, setIsSaving] = useState(false) // Add saving state
  const { setEditingCellId, updateEntities } = useCellEditing()
  const { focusCell, selectCell } = useSelectionCellsContext()

  const isNameAutoGenerated = name === generateSystemName(label)

  // Reset when props change
  useEffect(() => {
    setLabel(initialLabel)
    setName(initialName)
  }, [initialLabel, initialName])

  const handleCancel = useCallback(() => {
    if (isSaving) return // Don't allow cancel while saving
    setEditingCellId(null)
  }, [setEditingCellId, isSaving])

  const handleLabelChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (isSaving) return // Don't allow changes while saving
      const value = e.target.value
      setLabel(value)
      if (isNameAutoGenerated) {
        setName(generateSystemName(value))
      }
    },
    [isNameAutoGenerated, isSaving],
  )

  const handleNameChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (isSaving) return // Don't allow changes while saving
      setName(e.target.value)
    },
    [isSaving],
  )

  const handleInputKeyDown = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault()
    } else if (e.key === 'ArrowUp') {
      e.preventDefault()
    }
  }, [])

  const handleInputClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputDoubleClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseDown = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseUp = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  return (
    <EditingContainer onClick={(e) => e.stopPropagation()}>
      <StyledInput
        id={`${cellId}-label`}
        type="text"
        value={label}
        onChange={handleLabelChange}
        onKeyDown={handleInputKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        placeholder={`${upperFirst(entityType)} label...`}
        style={{ paddingBottom: '6px' }}
        disabled={isSaving}
      />
      <InputLabel htmlFor={`${cellId}-name`}>Name</InputLabel>
      <StyledInput
        id={`${cellId}-name`}
        type="text"
        value={name}
        onChange={handleNameChange}
        onKeyDown={handleInputKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        className="system-name"
        placeholder={`${entityType}_name`}
        disabled={isSaving}
      />
    </EditingContainer>
  )
}
export default RenameForm
