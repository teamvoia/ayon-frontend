import React, { useState, useEffect, useRef, useCallback } from 'react'
import styled from 'styled-components'
import { useCellEditing } from '@shared/containers'
import { useSelectionCellsContext } from '../context/SelectionCellsContext'
import { theme } from '@ynput/ayon-react-components'
import { upperFirst } from 'lodash'

// Helper: generate system name
const generateSystemName = (displayName: string): string => {
  return displayName
    .toLowerCase()
    .trim()
    .replace(/\s+/g, '_')
    .replace(/[^a-z0-9_]/g, '')
    .replace(/_+/g, '_')
    .replace(/^_|_$/g, '')
}

const EditingContainer = styled.div`
  background: var(--md-sys-color-surface-container-lowest);
  border: 2px solid var(--md-sys-color-primary);
  padding: 8px;
  width: 350px;
  border-radius: 4px;
`

const InputLabel = styled.label`
  font-size: 12px;
  color: var(--md-sys-color-outline);
`

const StyledInput = styled.input`
  width: 100%;
  border: none;
  background-color: var(--md-sys-color-surface-container-lowest);
  color: var(--md-sys-color-on-surface);

  &:focus {
    outline: none;
  }

  &.system-name {
    ${theme.bodySmall}
  }
`

interface InlineEditingWidgetProps {
  cellId: string
  rowId: string
  entityType: string
  initialName?: string
  initialLabel?: string
  onClose?: () => void
  valueData?: any // Contains meta, type, entityRowId, columnId
}

const RenameForm: React.FC<InlineEditingWidgetProps> = ({
  cellId,
  rowId,
  entityType,
  initialName,
  initialLabel = '',
  onClose,
  valueData,
}) => {
  const [label, setLabel] = useState(initialLabel)
  const [name, setName] = useState(initialName)
  const [isSaving, setIsSaving] = useState(false) // Add saving state
  const { setEditingCellId } = useCellEditing()
  const labelInputRef = useRef<HTMLInputElement>(null)
  const nameInputRef = useRef<HTMLInputElement>(null)

  const isNameAutoGenerated = name === generateSystemName(label)

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (labelInputRef.current) {
        labelInputRef.current.focus()
      }
    }, 0)
    return () => clearTimeout(timeout)
  }, [])

  useEffect(() => {
    setLabel(initialLabel)
    setName(initialName)
  }, [initialLabel, initialName])

  const handleSave = useCallback(async () => {
    if (isSaving) return
    const hasChanges = name !== initialName || label !== initialLabel
    if (hasChanges) {
      // Optimistically close the widget immediately
      setEditingCellId(null)
      onClose?.()

      // Store original values in case we need to revert
      const originalName = initialName
      const originalLabel = initialLabel

      try {
        const { meta, type, entityRowId } = valueData || {}

        const promises = []

        if (name !== initialName) {
          const finalName = name?.trim() || generateSystemName(label.trim())
          promises.push(
            meta?.updateEntities?.(
              { field: 'name', value: finalName, type, rowId: entityRowId },
              { selection: meta?.selection },
            ),
          )
        }

        if (label !== initialLabel) {
          const finalLabel = label.trim()
          promises.push(
            meta?.updateEntities?.(
              { field: 'label', value: finalLabel, type, rowId: entityRowId },
              { selection: meta?.selection },
            ),
          )
        }

        // Wait for all updates to complete
        await Promise.all(promises)
      } catch (error) {
        console.error('Failed to update entity:', error)
      }
    } else {
      // No changes, just close
      setEditingCellId(null)
      onClose?.()
    }
  }, [isSaving, label, name, initialName, initialLabel, valueData, setEditingCellId, onClose])

  const handleCancel = useCallback(() => {
    if (isSaving) return
    setEditingCellId(null)
    onClose?.()
  }, [setEditingCellId, isSaving, onClose])

  const handleLabelChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (isSaving) return // Don't allow changes while saving
      const value = e.target.value
      setLabel(value)
      if (isNameAutoGenerated) {
        setName(generateSystemName(value))
      }
    },
    [isNameAutoGenerated, isSaving],
  )

  const handleNameChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (isSaving) return // Don't allow changes while saving
      setName(e.target.value)
    },
    [isSaving],
  )

  const handleLabelKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'ArrowDown') {
        e.preventDefault()
        if (nameInputRef.current) {
          nameInputRef.current.focus()
          // Position cursor at the end of the name input
          const length = nameInputRef.current.value.length
          nameInputRef.current.setSelectionRange(length, length)
        }
      } else if (e.key === 'Enter') {
        e.preventDefault()
        handleSave()
      } else if (e.key === 'Escape') {
        // ESC to cancel
        e.preventDefault()
        e.stopPropagation()
        handleCancel()
      }
    },
    [handleSave, handleCancel],
  )

  const handleNameKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'ArrowUp') {
        e.preventDefault()
        if (labelInputRef.current) {
          labelInputRef.current.focus()
          // Position cursor at the end of the label input
          const length = labelInputRef.current.value.length
          labelInputRef.current.setSelectionRange(length, length)
        }
      } else if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        // Ctrl+Enter or Cmd+Enter to save
        e.preventDefault()
        handleSave()
      } else if (e.key === 'Escape') {
        // ESC to cancel
        e.preventDefault()
        e.stopPropagation()
        handleCancel()
      }
    },
    [handleSave, handleCancel],
  )

  const handleInputClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputDoubleClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseDown = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  const handleInputMouseUp = useCallback((e: React.MouseEvent<HTMLInputElement>) => {
    e.stopPropagation()
  }, [])

  // Handle clicking outside to save
  const handleClickOutside = useCallback(
    (e: MouseEvent) => {
      const container = document.getElementById(`editing-container-${cellId}`)
      if (container && !container.contains(e.target as Node) && !isSaving) {
        handleSave()
      }
    },
    [cellId, isSaving, handleSave],
  )

  // Add/remove click outside listener
  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [handleClickOutside])

  return (
    <EditingContainer id={`editing-container-${cellId}`} onClick={(e) => e.stopPropagation()}>
      <StyledInput
        ref={labelInputRef}
        id={`${cellId}-label`}
        type="text"
        value={label}
        onChange={handleLabelChange}
        onKeyDown={handleLabelKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        placeholder={`${upperFirst(entityType)} label...`}
        style={{ paddingBottom: '6px' }}
        disabled={isSaving}
      />
      <InputLabel htmlFor={`${cellId}-name`}>Name</InputLabel>
      <StyledInput
        ref={nameInputRef}
        id={`${cellId}-name`}
        type="text"
        value={name}
        onChange={handleNameChange}
        onKeyDown={handleNameKeyDown}
        onClick={handleInputClick}
        onDoubleClick={handleInputDoubleClick}
        onMouseDown={handleInputMouseDown}
        onMouseUp={handleInputMouseUp}
        className="system-name"
        placeholder={`${entityType}_name`}
        disabled={isSaving}
      />
    </EditingContainer>
  )
}
export default RenameForm
